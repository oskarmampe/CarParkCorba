module Server {

    enum DeviceType {entry_gate, exit_gate, paystation, local_server};

    struct VehicleEvent {
        long timestamp;
        string registration_number;
    };

    struct Device {
        string device_name;
        string device_ior;
        DeviceType type;
    };

     struct PayTicket {
        string registration_number;
        double amount;
        long parked_for_timestamp;
        long timestamp;
    };

    struct AlarmEvent {
        VehicleEvent in_event;
        VehicleEvent out_event;
        PayTicket pay_event;
    };

    typedef sequence<Device> devices;
    typedef sequence<AlarmEvent> alarmed_events;


    interface CompanyHQ {
        readonly attribute devices all_devices;
        readonly attribute alarmed_events events;
        void raise_alarm(in VehicleEvent in_event, in VehicleEvent out_event, in PayTicket pay_ticket);
        void register_local_server(in string server_name, in string server_ior);
        devices get_local_server_devices(in Device local_server);
        void turn_off_device(in string device_ior);
    };
};